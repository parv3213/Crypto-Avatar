{"version":3,"sources":["utils.js","components/Header.jsx","components/AllKitties.jsx","components/Body.jsx","components/App.jsx","index.js"],"names":["getCryptoKitty","web3","a","eth","net","getId","networkId","contractDeployment","CryptoKitty","networks","window","alert","Contract","abi","address","Header","account","className","AllKitties","allKitties","useState","kittyAvatarsURL","setKittyAvatarsURL","loading","setLoading","useEffect","forEach","kitty","kittyAvatarURL","init","scope","map","index","key","src","alt","Body","mint","getBalance","breed","userAccount","setUserAccount","userBalance","setUserBalance","avatarId1","setAvatarId1","avatarId2","setAvatarId2","handleMint","handleBreed","getUserBalance","_userBalance","onClick","type","placeholder","onChange","e","target","value","defaultValue","App","setAccount","undefined","cryptoKitty","setCryptoKitty","setAllKitties","reload","setReload","Promise","resolve","reject","ethereum","Web3","enable","getAccounts","accounts","methods","getAllKitties","call","send","from","on","hash","_account","balanceOf","kittyId1","kittyId2","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.657847df.chunk.js","sourcesContent":["import Web3 from \"web3\";\nimport CryptoKitty from \"./contracts/Cryptokitty.json\";\n\nconst getWeb3 = () => {\n\treturn new Promise(async (resolve, reject) => {\n\t\tif (window.ethereum) {\n\t\t\tconst web3 = new Web3(window.ethereum);\n\t\t\ttry {\n\t\t\t\tawait window.ethereum.enable();\n\t\t\t\tresolve(web3);\n\t\t\t} catch (e) {\n\t\t\t\treject(e);\n\t\t\t}\n\t\t} else if (window.web3) {\n\t\t\tresolve(window.web3);\n\t\t} else {\n\t\t\twindow.alert(\"Must install Metamask Extension!\\nDApp will not load\");\n\t\t\treject(\"Must install Metamask Extension!\");\n\t\t}\n\t});\n};\n\nconst getCryptoKitty = async (web3) => {\n\tconst networkId = await web3.eth.net.getId();\n\tconst contractDeployment = CryptoKitty.networks[networkId];\n\tif (!contractDeployment) window.alert(\"Contract is not deployed on this network!\");\n\treturn new web3.eth.Contract(CryptoKitty.abi, contractDeployment && contractDeployment.address);\n};\n\nexport { getWeb3, getCryptoKitty };\n","import React from \"react\";\n\nexport default function Header({ account }) {\n\treturn (\n\t\t<nav className=\"navbar navbar-expand-lg mx-3 my-3\">\n\t\t\t<p className=\"navbar-brand\">CryptoAvatars</p>\n\t\t\t<span className=\"ml-auto\">Current Account: {account}</span>\n\t\t</nav>\n\t);\n}\n","import React, { useState, useEffect } from \"react\";\n\nexport default function AllKitties({ allKitties }) {\n\tconst [kittyAvatarsURL, setKittyAvatarsURL] = useState([]);\n\tconst [loading, setLoading] = useState(true);\n\n\tuseEffect(() => {\n\t\tconst init = async () => {\n\t\t\tallKitties.forEach((kitty) => {\n\t\t\t\tconst kittyAvatarURL = `https://api.adorable.io/avatars/100/${kitty[2]}${kitty[3]}.png`;\n\t\t\t\tsetKittyAvatarsURL((kittyAvatarsURL) => [...kittyAvatarsURL, kittyAvatarURL]);\n\t\t\t});\n\t\t\tsetLoading(false);\n\t\t};\n\t\tinit();\n\t}, [allKitties]);\n\n\tif (loading === true) {\n\t\treturn <div className=\"mx-3 my-3\">Loading..</div>;\n\t}\n\n\treturn (\n\t\t<div className=\"my-3 allAvatars\">\n\t\t\t<h2>All Avatars</h2>\n\t\t\t<table className=\"table table-hover  table-dark\">\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th scope=\"col\">Id</th>\n\t\t\t\t\t\t<th scope=\"col\">Generation</th>\n\t\t\t\t\t\t<th scope=\"col\">Gene A</th>\n\t\t\t\t\t\t<th scope=\"col\">Gene B</th>\n\t\t\t\t\t\t<th scope=\"col\">Avatar</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{allKitties.map((kitty, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<tr key={index}>\n\t\t\t\t\t\t\t\t<th>{kitty[0]}</th>\n\t\t\t\t\t\t\t\t<td>{kitty[1]}</td>\n\t\t\t\t\t\t\t\t<td>{kitty[2]}</td>\n\t\t\t\t\t\t\t\t<td>{kitty[3]}</td>\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t<img src={kittyAvatarsURL[index]} alt=\"\" />\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>\n\t);\n}\n","import React, { useState } from \"react\";\nimport AllKitties from \"./AllKitties\";\n\nexport default function Body({ allKitties, mint, getBalance, breed }) {\n\tconst [loading, setLoading] = useState(false);\n\tconst [userAccount, setUserAccount] = useState(\"\");\n\tconst [userBalance, setUserBalance] = useState(\"-\");\n\tconst [avatarId1, setAvatarId1] = useState(\"\");\n\tconst [avatarId2, setAvatarId2] = useState(\"\");\n\n\tconst handleMint = async () => {\n\t\t// setLoading(true);\n\t\tawait mint();\n\t\t// window.alert(\"Mint Successful!\");\n\t\t// setLoading(false);\n\t};\n\n\tconst handleBreed = async () => {\n\t\tawait breed(avatarId1, avatarId2);\n\t};\n\n\tconst getUserBalance = async () => {\n\t\tsetLoading(true);\n\t\tconst _userBalance = await getBalance(userAccount);\n\t\tsetUserBalance(_userBalance);\n\t\tsetLoading(false);\n\t};\n\tif (loading === true) return <p className=\"text-center\">Processing...</p>;\n\treturn (\n\t\t<div className=\"mx-5 mt-5\">\n\t\t\t<div className=\"text-center\">\n\t\t\t\t<h1>CryptoAvatars</h1>\n\t\t\t\t<p className=\"heading-sub\">Collect and breed forrver friends!</p>\n\t\t\t</div>\n\t\t\t<div className=\"jumbotron mx-auto mt-3\">\n\t\t\t\t<div className=\"info\">\n\t\t\t\t\t<li>Mint new Avatar</li>\n\t\t\t\t\t<li>Breed your Avatars</li>\n\t\t\t\t\t<li>Buy and Sell Avatars</li>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"my-5 options\">\n\t\t\t\t<div className=\"input-group my-3\">\n\t\t\t\t\t<div className=\"input-group-prepend\">\n\t\t\t\t\t\t<div className=\"input-group-text\">Mint a new Avatar</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<button className=\"btn btn-success mx-3\" onClick={handleMint}>\n\t\t\t\t\t\tMint\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"input-group my-3\">\n\t\t\t\t\t<div className=\"input-group-prepend\">\n\t\t\t\t\t\t<div className=\"input-group-text\">Get Balance of</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"form-control input-width\"\n\t\t\t\t\t\tplaceholder=\"Account\"\n\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\tsetUserAccount(e.target.value);\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<button className=\"btn btn-success mx-3\" onClick={getUserBalance}>\n\t\t\t\t\t\tGet Avatar Balance\n\t\t\t\t\t</button>\n\t\t\t\t\t<p type=\"text\" className=\"form-control\" defaultValue=\"\">\n\t\t\t\t\t\t{userBalance} Avatars\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"input-group my-3\">\n\t\t\t\t\t<div className=\"input-group-prepend\">\n\t\t\t\t\t\t<div className=\"input-group-text\">Breed Avatars</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"form-control input-width\"\n\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\tsetAvatarId1(e.target.value);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tplaceholder=\"Avatar-1 ID\"\n\t\t\t\t\t/>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"form-control input-width\"\n\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\tsetAvatarId2(e.target.value);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tplaceholder=\"Avatar-2 ID\"\n\t\t\t\t\t/>\n\t\t\t\t\t<button className=\"btn btn-success mx-3\" onClick={handleBreed}>\n\t\t\t\t\t\tBreed\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<AllKitties allKitties={allKitties} />\n\t\t</div>\n\t);\n}\n","import React, { useEffect, useState } from \"react\";\nimport { getWeb3, getCryptoKitty } from \"../utils.js\";\nimport Header from \"./Header\";\nimport Body from \"./Body\";\n// import \"./App.css\";\n\nfunction App() {\n\tconst [account, setAccount] = useState(\"\");\n\tconst [cryptoKitty, setCryptoKitty] = useState(undefined);\n\tconst [allKitties, setAllKitties] = useState([]);\n\tconst [loading, setLoading] = useState(true);\n\tconst [reload, setReload] = useState(0);\n\n\tuseEffect(() => {\n\t\tconst init = async () => {\n\t\t\tconst web3 = await getWeb3();\n\t\t\tconst accounts = await web3.eth.getAccounts();\n\t\t\tconst cryptoKitty = await getCryptoKitty(web3);\n\t\t\t// await initialize(cryptoKitty, accounts[0]);\n\t\t\tconst allKitties = await cryptoKitty.methods.getAllKitties().call();\n\t\t\tsetAccount(accounts[0]);\n\t\t\tsetCryptoKitty(cryptoKitty);\n\t\t\tsetAllKitties(allKitties);\n\t\t\tsetLoading(false);\n\t\t};\n\t\tinit();\n\t}, [reload]);\n\n\tconst mint = async () => {\n\t\tsetLoading(true);\n\t\tawait cryptoKitty.methods\n\t\t\t.mint()\n\t\t\t.send({ from: account })\n\t\t\t.on(\"transactionHash\", (hash) => {\n\t\t\t\tsetReload(reload + 1);\n\t\t\t});\n\t};\n\n\tconst getBalance = async (_account) => {\n\t\ttry {\n\t\t\tconst userBalance = await cryptoKitty.methods.balanceOf(_account).call();\n\t\t\treturn userBalance;\n\t\t} catch (e) {\n\t\t\twindow.alert(\"Pass correct address!\");\n\t\t\treturn \"\";\n\t\t}\n\t};\n\n\tconst breed = async (kittyId1, kittyId2) => {\n\t\ttry {\n\t\t\tsetLoading(true);\n\t\t\tawait cryptoKitty.methods\n\t\t\t\t.breed(kittyId1, kittyId2)\n\t\t\t\t.send({ from: account })\n\t\t\t\t.on(\"transactionHash\", (hash) => {\n\t\t\t\t\tsetReload(reload + 1);\n\t\t\t\t});\n\t\t} catch (e) {\n\t\t\twindow.alert(\"Error\\nGive correct Kitty Ids\");\n\t\t}\n\t};\n\n\tif (loading) return <h2 className=\"text-center\">Loading...</h2>;\n\n\treturn (\n\t\t<div>\n\t\t\t<Header account={account} />\n\t\t\t<Body allKitties={allKitties} mint={mint} getBalance={getBalance} breed={breed} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./scss/index.scss\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}